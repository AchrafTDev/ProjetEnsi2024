Register.php :
--------------

SQL Injection Prevention: Use prepared statements to avoid SQL injection.
Form Validation: Improve client-side and server-side validation.
Password Hashing: Use password_hash and password_verify for better security.
Code Structure: Fix the JavaScript for better functionality and maintainability.
                          ---------------------------------
SQL Injection Prevention: Using prepared statements with bind_param to secure database queries.
Password Hashing: Using password_hash to securely hash passwords before storing them.
Form Validation: Both client-side and server-side validation to ensure data integrity and security.
JavaScript Validation: Simplified validation logic and ensured proper styling for validation feedback.
-------------------------------------------------------------------------------------------------------

logout.php :
------------

Session Management: Make sure to clear all session data and not just destroy the session.
Redirection: Ensure that the header() function is called before any output is sent to the browser.
                          ---------------------------------
 ** Key Points:
---------------
Clearing Session Variables: $_SESSION = array(); clears all session variables.
Deleting Session Cookie: If cookies are used to store the session ID, delete the cookie to ensure the session is fully invalidated.
Redirection: exit(); ensures that no further code is executed after redirection.
 ** Explanation:
----------------
session_start();: Initializes the session.
$_SESSION = array();: Clears all session variables.
Cookie Deletion: Ensures that the session cookie is deleted if it's being used.
session_destroy();: Destroys the session.
header("Location: index.php");: Redirects the user to the homepage or login page.
exit();: Ensures that no additional code runs after the redirection.
-------------------------------------------------------------------------------------------------------
Login.php :
-----------

SQL Injection Prevention: Use prepared statements instead of concatenating SQL queries.
Password Hashing: Use password_hash for storing passwords and password_verify for checking them.
Form Validation: Improve client-side validation.
Session Management: Ensure session security and best practices.
                        ----------------------------------
 ** Key Changes:
----------------
Prepared Statements: Avoid SQL injection by using prepared statements with bind_param.
Password Hashing: Use password_hash and password_verify for secure password handling.
Form Validation: Improved JavaScript validation to handle empty fields.
Session Security: Added exit() after redirection to prevent further code execution.
 ** Explanation:
----------------
Sanitization and Validation: Basic checks are added to ensure input is not empty.
Password Verification: password_verify is used for secure password checking.
JavaScript Validation: Enhanced to handle field validation more efficiently.
This approach ensures that your login system is secure and follows best practices.
-----------------------------------------------------------------------------------------------------

Index.php : 
-----------

SQL Injection Prevention: Use prepared statements for database queries.
Improved Code Readability: Cleaner HTML and PHP separation.
Error Handling: Handle potential errors gracefully.
                       ------------------------------------
 ** Key Changes:
----------------
SQL Injection Prevention: Used prepared statements with bind_param to safely handle user input and query execution.
Error Handling: Added basic error handling for query preparation.
Code Readability: Improved HTML and PHP separation for cleaner code.
 ** Explanation:
----------------
Session Handling: Fetches user details using prepared statements to prevent SQL injection.
Database Queries: All queries are prepared and executed using parameter binding.
Error Messages: Added messages to handle potential query preparation errors.
----------------------------------------------------------------------------------------------------

Header.php : 
------------

SQL Injection Prevention: Use prepared statements to prevent SQL injection in your queries.
HTML Structure: Clean up the HTML structure for better readability.
CSS and JS Linking: Ensure you use the correct paths and include integrity checks if needed.
Session Check: Ensure that the session is started before checking session variables
                      -----------------------------------
 ** Key Improvements:
---------------------
Session Handling: Ensure session_start() is called at the beginning of the script before any output or session checks.
SQL Injection Prevention: Used prepared statements for querying both top categories and category details.
HTML Clean-Up: Improved HTML for readability and consistency.
Security: Used htmlspecialchars() to prevent XSS attacks when outputting user data.
 ** Explanation:
----------------
Prepared Statements: Enhanced security by avoiding SQL injection.
HTML Structure: Cleaned up HTML to ensure proper nesting and readability.
Session Handling: Ensured session handling is done before any HTML output to avoid issues with session variables.
--------------------------------------------------------------------------------------------------

Footer.php : 
------------

 ** Key Points:
---------------
Content Placeholder: Added placeholders (<p>) for content to illustrate where to put your text or other elements.
Inline Styles: Kept inline styles for specific customizations, but consider moving them to an external CSS file for better maintainability.
Bootstrap Well Class: The .well class adds a rounded border and background color, making it a good choice for container elements.
Itâ€™s worth noting that in Bootstrap 4 and later, the .well class is no longer included, and its styling should be replaced with utilities like .card or custom styles.
 ** Explanation:
----------------
Grid System: The .row and .col-lg-6 classes are used to create a responsive grid layout. This ensures that the layout adjusts based on the screen size.
Centering Content: The style="text-align: center;" ensures that the content within the columns and .well is centered.
Border: The border-right style on the first column creates a visual separation between the two columns.
-------------------------------------------------------------------------------------------------

Connection.php :
----------------

 ** Key Improvements:
---------------------
Connection Check: Added a check to see if the connection was successful and output a meaningful error message if it fails.
Function Documentation: Added comments to explain the purpose and parameters of the 'mres' function. This improves code readability and maintainability.
Improved String Trimming: Used 'trim()' instead of 'rtrim(ltrim())' for better readability and to handle both leading and trailing spaces.
 ** Explanation:
----------------
mysqli_connect(): Establishes a connection to the MySQL database with the provided credentials.
mysqli_connect_error(): Provides the error message if the connection fails.
mysqli_real_escape_string(): Escapes special characters in a string to prevent SQL injection attacks.
trim(): Removes whitespace from both ends of a string, simplifying the original combination of ltrim() and rtrim().
-------------------------------------------------------------------------------------------------

change_username.php :
---------------------

 ** Key Improvements:
---------------------
*Sanitization and Validation:

Used htmlspecialchars() for escaping special characters in URLs to prevent XSS attacks.
Added the required attribute to the <input> element to ensure the user provides a username.

*Security:
htmlspecialchars($_SERVER["PHP_SELF"]) helps prevent XSS attacks by escaping special characters.
Ensured trim() in JavaScript validation to avoid empty username submissions.

*User Feedback:
Improved user feedback messages with clear success and error notifications.

*HTML and JavaScript:
Corrected id usage in JavaScript: $('#form_change_username') instead of $('form_change_username').
Added required attribute to input to improve client-side validation.

 ** Explanation of Key Parts:
-----------------------------

Database Update: Executes an SQL query to update the username for the current user.
Session Management: Updates the session variable with the new username if the update is successful.
Form Handling: Ensures that the form cannot be submitted with an empty username and provides visual feedback for input errors.
Security Measures: Properly sanitizes user input and uses secure practices for form handling.
-----------------------------------------------------------------------------------------------

Change_password.php : 
---------------------

 ** Key Improvements:
---------------------
*Password Matching Validation:
Ensured that the password fields match before updating the database.
Used client-side validation to alert the user if passwords do not match.

*Security Enhancements:
Used htmlspecialchars() to prevent XSS attacks by escaping special characters.
Used md5() to hash passwords; however, for improved security, consider using password_hash() and password_verify() for password management.

*HTML and JavaScript Enhancements:
Added required attribute to the input fields to ensure they are not empty.
Improved JavaScript validation by trimming whitespace and checking for matching passwords.

*User Feedback:
Provided clear success and error messages to the user.

*Best Practices:
Avoid using md5() for password hashing in modern applications. Use password_hash() and password_verify() for better security.
------------------------------------------------------------------------------------------------

Change_email.php : 
------------------

 **Key Improvements:
--------------------

*Security Enhancements:
Used htmlspecialchars() to escape special characters and prevent XSS attacks.
Made sure that input is sanitized with mres() to prevent SQL injection.

*Validation:
Added required attributes to email fields to ensure they are not empty.
Used client-side validation to ensure that both email fields match and are not empty.

*User Feedback:
Provided clear, user-friendly messages for errors and successful updates.
Reset previous error styles and messages before running new validations.

*Code Cleanliness:
Improved readability by removing redundant styles and using proper HTML attributes.

*Best Practices:
Reset input field styles to their default state before applying new error styles.


